# Reusable workflow for notarizing the macOS build

name: Apple App Notarization

on: 
  workflow_call:
    inputs:
      xcode-version:
        required: false 
        description: The XCode version to use, defaults to 14
        default: 14
        type: string
    secrets:
      APPLE_CERTIFICATE_DATA:
        required: true
      APPLE_CERTIFICATE_PASSPHRASE:
        required: true  
      APPLE_TEAM_NAME:
        required: true
      APPLE_NOTARIZATION_USERNAME:
        required: true
      APPLE_NOTARIZATION_PASSWORD:
        required: true
  
jobs: 
  notarize:
    runs-on: macos-12
    timeout-minutes: 15 # should be enough for notarization
    steps:
      - uses: actions/checkout@v3
      - name: Debug List
        run: ls -R
      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: Build-${{ github.run_id }}-StandaloneOSX
          path: Build-${{ github.run_id }}-StandaloneOSX
      - name: Select XCode Version ${{ inputs.xcode-version }}
        uses: devbotsxyz/xcode-select@main
        with:
          version: ${{ inputs.xcode-version }}
      - name: Generate random keychain password
        id: password
        run: |
          random_password=$(openssl rand -base64 64)
          echo "::add-mask::$random_password"
          echo "::set-output name=value::$random_password"
      - name: Import certificate
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.APPLE_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.APPLE_CERTIFICATE_PASSPHRASE }}
          keychain-password: ${{ steps.password.outputs.value }}
          keychain-name: BoundfoxStudiosTemporaryKeychain
      - name: Copy .entitlements file
        run: cp build-resources/macOS/CommunityProject.entitlements Build-${{ github.run_id }}-StandaloneOSX
      - name: Fix permissions
        run: chmod -R a+xr CommunityProject.app
        working-directory: Build-${{ github.run_id }}-StandaloneOSX
      - name: Sign
        run: codesign --deep --force --verify --verbose --timestamp --options runtime --entitlements "CommunityProject.entitlements" --sign "${{ secrets.APPLE_TEAM_NAME }}" CommunityProject.app
        working-directory: Build-${{ github.run_id }}-StandaloneOSX
      - name: Notarize
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: Build-${{ github.run_id }}-StandaloneOSX/CommunityProject.app
          appstore-connect-username: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
      - name: Staple
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: Build-${{ github.run_id }}-StandaloneOSX/CommunityProject.app
      # We need to create a TAR archive before uploading due to possible permission loss
      # See: 
      #   - https://github.com/actions/upload-artifact#permission-loss
      #   - https://github.com/game-ci/unity-actions/issues/152
      - name: Create TAR archive
        run: |
          rm Build-${{ github.run_id }}-StandaloneOSX/CommunityProject.entitlements
          tar -czf Build-${{ github.run_id }}-StandaloneOSX.tar Build-${{ github.run_id }}-StandaloneOSX
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: Build-${{ github.run_id }}-StandaloneOSX
          path: Build-${{ github.run_id }}-StandaloneOSX.tar
          if-no-files-found: error